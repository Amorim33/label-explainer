import { intro, outro, select, spinner, text } from "@clack/prompts";
import { google } from "@ai-sdk/google";
import { z } from "zod";
import fs from "fs";
import { generateText } from "ai";
import ExcelJS from "exceljs";

const model = google("gemini-2.0-flash-001");
const BATCH_SIZE = 100;

const spin = spinner();

const readExcelFile = async (filePath: string): Promise<string[]> => {
  const workbook = new ExcelJS.Workbook();
  await workbook.xlsx.readFile(filePath);
  const worksheet = workbook.getWorksheet(1);

  const texts: string[] = [];
  worksheet?.eachRow((row, rowNumber) => {
    if (rowNumber > 1) {
      const cellValue = row.getCell(1).value;
      if (cellValue) {
        texts.push(cellValue.toString());
      }
    }
  });

  return texts;
};

const cleanTsvOutput = (text: string): string => {
  return text.replace(/^```tsv\s*\n?/, '').replace(/\n?```\s*$/, '').trim();
};

const writeExcelFile = async (filePath: string, data: Array<{ text: string, label: string, explanation: string }>) => {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet('Results');

  worksheet.addRow(['text', 'label', 'label_explanation']);

  data.forEach(row => {
    worksheet.addRow([row.text, row.label, row.explanation]);
  });

  worksheet.columns.forEach(column => {
    column.width = 30;
  });

  await workbook.xlsx.writeFile(filePath);
};

const validateWithZod =
  (
    schema:
      | z.ZodString
      | z.ZodEffects<z.ZodString>
      | z.ZodEffects<z.ZodEffects<z.ZodString>>
  ) =>
    (value: string): string | Error | undefined => {
      const result = schema.safeParse(value);
      if (!result.success) {
        return result.error.message;
      }

      return undefined;
    };

intro("Label Explainer ðŸª„");

const action = await select({
  message: "What do you want to do?",
  options: [
    {
      value: "explain-stance-labels-tweets",
      label: "Explain Stance Labels in Tweets",
    },
    {
      value: "classify-and-explain-stance-tweets",
      label: "Classify and Explain Stance Labels in Tweets",
    },
  ],
});

switch (action) {
  case "explain-stance-labels-tweets": {
    const target = z.string().parse(
      await text({
        message: "Enter the target.",
        validate: validateWithZod(z.string().min(1)),
      })
    );

    const language = z.enum(["portuguese", "english"]).parse(
      await select({
        message: "Enter the language of the dataset.",
        options: [
          { value: "portuguese", label: "Portuguese" },
          { value: "english", label: "English" },
        ],
      })
    );

    const fileFormat = z.enum(["csv", "tsv", "xlsx"]).parse(
      await select({
        message: "Enter the file format.",
        options: [
          { value: "csv", label: "CSV" },
          { value: "tsv", label: "TSV" },
          { value: "xlsx", label: "XLSX (Excel)" },
        ],
      })
    );

    const datasetPath = z.string().parse(
      await text({
        message: `Enter the dataset path.\n The dataset should be a ${fileFormat === "xlsx"
          ? "Excel file with text and label columns"
          : fileFormat === "csv" ? "," : "\\t"
          }${fileFormat !== "xlsx" ? "-separated file." : "."}`,
        validate: validateWithZod(
          z
            .string()
            .refine((value) => fs.existsSync(value), "Dataset does not exist")
        ),
      })
    );

    let dataRows: { text: string; label: string }[] = [];

    if (fileFormat === "xlsx") {
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(datasetPath);
      const worksheet = workbook.getWorksheet(1);

      worksheet?.eachRow((row, rowNumber) => {
        if (rowNumber > 1) {
          const text = row.getCell(1).value?.toString() || "";
          const label = row.getCell(3).value?.toString() || "";
          if (text && label) {
            dataRows.push({ text, label });
          }
        }
      });
    } else {
      const dataset = fs.readFileSync(datasetPath, "utf-8");
      for (const line of dataset.split("\n")) {
        if (line.trim()) {
          const [text, label] = line.split(fileFormat === "csv" ? "," : "\t");
          if (text && label) {
            dataRows.push({ text, label });
          }
        }
      }
    }

    const batches: { text: string; label: string }[][] = [[]];
    let lineCount = 0;
    let batchIndex = 0;

    for (const row of dataRows) {
      batches[batchIndex].push(row);
      lineCount++;
      if (lineCount === BATCH_SIZE) {
        batchIndex++;
        batches.push([]);
        lineCount = 0;
      }
    }

    const promises = batches.map(async (batch) => {
      const { text } = await generateText({
        model,
        prompt: `
**Objective:** To generate clear and concise explanations for why a given tweet is classified as being "for" or "against" a specific target.

**Input:** You will be provided with a dataset of tweets, each with a pre-assigned stance label ("for" or "against") towards a given target.

**Output:** Your task is to generate a TSV (tab-separated values) output with the following columns: \`text\`, \`label\`, and \`label_explanation\`.

**Instructions:**

For each tweet, carefully analyze the text and its relationship with the designated **${target}**. Your explanation should be based on the following principles:

* **"against" Label:** A tweet is labeled "against" if it expresses a negative sentiment, criticism, opposition, or disagreement with the **${target}**. This can be a direct attack, an expression of disapproval, or the highlighting of negative consequences or aspects related to the **${target}**.
* **"for" Label:** A tweet is labeled "for" if it expresses a positive sentiment, support, agreement, or endorsement of the **${target}**. This can be through direct praise, highlighting benefits, or defending the **${target}** against criticism.

**Your generated \`label_explanation\` should:**

1.  **Directly reference the content of the tweet.** Quote or paraphrase specific words or phrases that are indicative of the stance.
2.  **Clearly state the reasoning.** Explicitly connect the textual evidence to the assigned stance label.
3.  **Be concise and easy to understand.** Aim for a one to two-sentence explanation.
4.  **Remain neutral and objective in your explanation.** Your role is to explain the stance, not to agree or disagree with it.
5.  **Return the explanation in ${language}.**

**Example of Expected Output:**
text\tlabel\tlabel_explanation
eu odeio tudo que o governo Bolsonaro Ã©! nÃ£o vai ter um dia sequer da minha vida que eu nÃ£o esteja desejando esse cara fora do comando do paÃ­s\tagainst\tO texto expressa sentimentos negativos explÃ­citos, como 'odeio', e um desejo claro de que o alvo, 'o governo Bolsonaro', seja removido do poder ('desejando esse cara fora do comando do paÃ­s'), o que demonstra uma forte oposiÃ§Ã£o.
um dos vÃ­deos mais engraÃ§ados Ã© o do Bolsonaro fazendo flexÃ£o KAKSKSKAKSKAKSKAKSS\tagainst\tO texto utiliza o humor e a risada ('KAKSKSKAKSKAKSKAKSS') para se referir a uma aÃ§Ã£o do alvo (Bolsonaro). Neste contexto, o ato de achar 'engraÃ§ado' um vÃ­deo do presidente sugere zombaria ou ridicularizaÃ§Ã£o, em vez de apoio, caracterizando uma postura contrÃ¡ria.
Eu tomei multa demais esse ano pqp... AÃ­ agora mudou a lei nÃ©? VocÃª vÃª que tÃ¡ fazendo merda na vida quando uma lei aprovada pelo Bolsonaro te favorece! PeÃ§o perdÃ£o desde jÃ¡ viu\tfor\tApesar do tom irÃ´nico e da aparente relutÃ¢ncia, o autor admite explicitamente que uma 'lei aprovada pelo Bolsonaro' o favorece. A postura Ã© considerada 'a favor' porque o texto afirma que a aÃ§Ã£o do alvo (a lei) Ã© benÃ©fica para o autor, independentemente de seus sentimentos pessoais sobre o polÃ­tico.

**Input:**
${batch.map(({ text, label }) => `${text}\t${label}`).join("\n")}`,
      });

      return text;
    });

    spin.start("Generating explanations...");
    const results = await Promise.all(promises);
    spin.stop();

    const allResults: Array<{ text: string, label: string, explanation: string }> = [];

    for (const batchResult of results) {
      const cleanedResult = cleanTsvOutput(batchResult);
      const lines = cleanedResult.split('\n');

      for (const line of lines) {
        if (line.startsWith("text")) {
          continue;
        }

        if (line.trim()) {
          const parts = line.split('\t');
          if (parts.length >= 3) {
            allResults.push({
              text: parts[0],
              label: parts[1],
              explanation: parts[2]
            });
          }
        }
      }
    }

    await writeExcelFile(`results-${target}-${language}.xlsx`, allResults);

    break;
  }
  case "classify-and-explain-stance-tweets": {
    const target = z.string().parse(
      await text({
        message: "Enter the target.",
        validate: validateWithZod(z.string().min(1)),
      })
    );

    const language = z.enum(["portuguese", "english"]).parse(
      await select({
        message: "Enter the language of the dataset.",
        options: [
          { value: "portuguese", label: "Portuguese" },
          { value: "english", label: "English" },
        ],
      })
    );

    const fileFormat = z.enum(["csv", "tsv", "xlsx"]).parse(
      await select({
        message: "Enter the file format.",
        options: [
          { value: "csv", label: "CSV" },
          { value: "tsv", label: "TSV" },
          { value: "xlsx", label: "XLSX (Excel)" },
        ],
      })
    );

    const datasetPath = z.string().parse(
      await text({
        message: `Enter the dataset path.\n The dataset should be a ${fileFormat === "xlsx"
          ? "Excel file with only a text column"
          : fileFormat === "csv" ? "," : "\\t"
          }${fileFormat !== "xlsx" ? "-separated file with only a text column." : "."}`,
        validate: validateWithZod(
          z
            .string()
            .refine((value) => fs.existsSync(value), "Dataset does not exist")
        ),
      })
    );

    let texts: string[] = [];

    if (fileFormat === "xlsx") {
      texts = await readExcelFile(datasetPath);
    } else {
      const dataset = fs.readFileSync(datasetPath, "utf-8");
      for (const line of dataset.split("\n")) {
        if (line.trim()) {
          const text = line.split(fileFormat === "csv" ? "," : "\t")[0];
          if (text) {
            texts.push(text);
          }
        }
      }
    }

    const batches: { text: string }[][] = [[]];
    let lineCount = 0;
    let batchIndex = 0;

    for (const text of texts) {
      batches[batchIndex].push({ text });
      lineCount++;
      if (lineCount === BATCH_SIZE) {
        batchIndex++;
        batches.push([]);
        lineCount = 0;
      }
    }

    const promises = batches.map(async (batch) => {
      const { text } = await generateText({
        model,
        prompt: `
**Objective:** To classify tweets as "for" or "against" a specific target and provide clear explanations for each classification.

**Input:** You will be provided with a list of tweets about **${target}**.

**Output:** Your task is to generate a TSV (tab-separated values) output with the following columns: \`text\`, \`label\`, and \`label_explanation\`.

**Classification Guidelines:**

* **"against" Label:** A tweet should be labeled "against" if it expresses:
  - Negative sentiment, criticism, or opposition towards **${target}**
  - Disagreement with policies, actions, or statements related to **${target}**
  - Mocking, sarcasm, or ridicule directed at **${target}**
  - Expressions of disappointment, anger, or frustration about **${target}**
  - Calls for removal, replacement, or cessation of **${target}**

* **"for" Label:** A tweet should be labeled "for" if it expresses:
  - Positive sentiment, support, or endorsement of **${target}**
  - Agreement with policies, actions, or statements of **${target}**
  - Praise, admiration, or celebration of **${target}**
  - Defense of **${target}** against criticism
  - Expressions of hope, satisfaction, or gratitude related to **${target}**

**Your generated \`label_explanation\` should:**

1. **Quote specific words or phrases** from the tweet that indicate the stance
2. **Clearly connect the evidence to the classification** - explain why these elements indicate "for" or "against"
3. **Be concise** - aim for 1-2 sentences maximum
4. **Remain objective** - explain the stance without personal judgment
5. **Be written in ${language}**
6. **Consider context and tone** - detect sarcasm, irony, or implicit meanings

**Example Output Format:**
text\tlabel\tlabel_explanation

**Input Tweets:**
${batch.map(({ text }) => text).join("\n")}

**Important:** Return ONLY the TSV format with no additional text or headers. Each line should contain exactly: tweet_text[TAB]label[TAB]explanation`,
      });

      return text;
    });

    spin.start("Classifying and generating explanations...");
    const results = await Promise.all(promises);
    spin.stop();

    const allResults: Array<{ text: string, label: string, explanation: string }> = [];

    for (const batchResult of results) {
      const cleanedResult = cleanTsvOutput(batchResult);
      const lines = cleanedResult.split('\n');

      for (const line of lines) {
        if (line.startsWith("text")) {
          continue;
        }

        if (line.trim()) {
          const parts = line.split('\t');
          if (parts.length >= 3) {
            allResults.push({
              text: parts[0],
              label: parts[1],
              explanation: parts[2]
            });
          }
        }
      }
    }

    await writeExcelFile(`classified-${target}-${language}.xlsx`, allResults);

    break;
  }
  default: {
    throw new Error("Invalid action");
  }
}

outro("Done! ðŸŽ‰");
